{"version":3,"sources":["EditableSpan.tsx","SingleTask.tsx","AddItemForm.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EditableSpan","title","onChange","useState","editMode","setEditMode","stateTitle","setStateTitle","TextField","variant","value","onBlur","e","currentTarget","autoFocus","onDoubleClick","SingleTask","data","deleteTaskCallback","changeStatusCallback","changeTaskTitle","listId","className","isDone","Checkbox","id","checked","color","newValue","IconButton","onClick","Delete","AddItemForm","addItem","setTitle","error","setError","handleClick","trim","onKeyPress","key","label","helperText","AddBox","Todolist","tasks","changeListTitle","addTaskCallback","changeFilter","filter","removeListCallback","mappedList","map","t","style","display","alignItems","justifyContent","newTitle","itemTitle","Button","listId1","v1","listId2","initData","initTodolist","App","setTasks","todoList","setTodoList","taskList","deleteTask","newTask","addTask","status","selectedTask","find","changeStatus","changeTaskTitleCallback","todoListID","selectedList","tl","removeList","AppBar","position","Toolbar","edge","aria-label","Typography","Container","fixed","Grid","container","padding","newList","spacing","filteredTasks","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.90b72e7c.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string,\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nconst EditableSpan: React.FC<EditableSpanPropsType> = ({title, onChange}) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [stateTitle, setStateTitle] = useState(\"\")\r\n\r\n    const setEditableMode = () => {\r\n        setEditMode(true)\r\n        setStateTitle(title)\r\n    }\r\n    const setViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(stateTitle)\r\n    }\r\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => setStateTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField variant={\"outlined\"} value={stateTitle} onBlur={setViewMode} onChange={onChangeInputHandler} autoFocus/>\r\n        : <span onDoubleClick={setEditableMode}>{title}</span>\r\n}\r\n\r\nexport default EditableSpan","import React, {ChangeEvent} from 'react'\r\nimport {TaskType} from \"./App\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\n\r\ntype TaskListPropType = {\r\n    data: TaskType,\r\n    deleteTaskCallback: (_id: string, listId: string) => void,\r\n    changeStatusCallback : (id: string, isDone: boolean, listId: string) => void,\r\n    changeTaskTitle: (id: string, newValue: string, listId: string) => void,\r\n    listId: string\r\n}\r\n\r\nconst SingleTask : React.FC<TaskListPropType> = ({data, deleteTaskCallback, changeStatusCallback, changeTaskTitle, listId}) => {\r\n    const onClickHandler = () => deleteTaskCallback(data.id, listId)\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => changeStatusCallback(data.id, e.currentTarget.checked, listId)\r\n    const onChangeTitleHandler = (newValue: string) => changeTaskTitle(data.id, newValue, listId)\r\n\r\n    return (\r\n        <div className={data.isDone ? \"is-done\" : \"\"}>\r\n            <Checkbox onChange={onChangeStatusHandler} color={\"primary\"} checked={data.isDone}/>\r\n            <EditableSpan title={data.title} onChange={onChangeTitleHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleTask","import React, {ChangeEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nconst AddItemForm: React.FC<AddItemFormPropsType> = ({ addItem }) => {\r\n\r\n    const [stateTitle, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === \"Enter\") handleClick()\r\n    }\r\n    //add new item on button click\r\n    const handleClick = () => {\r\n        if (stateTitle.trim() !== \"\") {\r\n            addItem(stateTitle)\r\n            setTitle(\"\")\r\n        } else setError(\"Title is required\")\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant={\"outlined\"}\r\n                   value={stateTitle}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   label={\"Title\"}\r\n                   helperText={error}\r\n        />\r\n        <IconButton color={\"primary\"} onClick={handleClick}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n}\r\n\r\nexport default AddItemForm","import React from \"react\";\nimport {FilterValuesType, TaskType} from \"./App\";\nimport SingleTask from \"./SingleTask\";\nimport AddItemForm from \"./AddItemForm\";\nimport EditableSpan from \"./EditableSpan\";\nimport {IconButton, Button} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\ntype TaskListPropsType = {\n    title: string\n    tasks: Array<TaskType>\n    deleteTaskCallback: (id: string, listId: string) => void\n    changeFilter: (listId: string, value: FilterValuesType) => void\n    addTaskCallback: (title: string, listId: string) => void\n    changeStatusCallback : (id: string, isDone: boolean, listId: string) => void\n    changeTaskTitle: (id: string, newValue: string, listId: string) => void\n    changeListTitle: (id: string, newValue: string) => void\n    filter: string,\n    id: string,\n    removeListCallback: (id:string) => void,\n}\n\nconst Todolist: React.FC<TaskListPropsType> = ({tasks, deleteTaskCallback, changeStatusCallback, changeTaskTitle, changeListTitle, addTaskCallback, title, changeFilter, filter, id, removeListCallback}) => {\n    const s = {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n    }\n\n    const mappedList = tasks.map((t: TaskType)  => (\n        <SingleTask\n            key={t.id}\n            listId={id}\n            data={t}\n            deleteTaskCallback={deleteTaskCallback}\n            changeStatusCallback={changeStatusCallback}\n            changeTaskTitle={changeTaskTitle}\n        />\n    ))\n\n    const onAllClickHandler = () => changeFilter(id, \"all\")\n    const onActiveClickHandler = () => changeFilter(id,\"active\")\n    const onCompletedClickHandler = () => changeFilter(id,\"completed\")\n    const onClickRemoveHandler = () => removeListCallback(id)\n    const handleAdd = (itemTitle: string) => addTaskCallback(itemTitle, id)\n    const handleChangeTitle = (newTitle: string) => changeListTitle(id, newTitle)\n\n    return (\n        <div>\n            <div style={s}>\n                <h3>\n                    <EditableSpan title={title} onChange={handleChangeTitle}/>\n                </h3>\n                <IconButton onClick={onClickRemoveHandler}>\n                    <Delete/>\n                </IconButton>\n            </div>\n            <AddItemForm addItem={handleAdd}/>\n            <ul>\n                {mappedList}\n            </ul>\n            <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                <Button variant={filter === \"all\" ? \"outlined\" : \"text\"} color={\"default\"} onClick={onAllClickHandler}>All</Button>\n                <Button variant={filter === \"active\" ? \"outlined\" : \"text\"} color={\"primary\"} onClick={onActiveClickHandler}>Active</Button>\n                <Button variant={filter === \"completed\" ? \"outlined\" : \"text\"} color={\"secondary\"} onClick={onCompletedClickHandler}>Completed</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Todolist","import React, {useState} from 'react'\nimport './App.css'\nimport {v1} from \"uuid\";\nimport Todolist from \"./Todolist\";\nimport AddItemForm from \"./AddItemForm\";\nimport {AppBar, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu';\n\nexport interface TaskType {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nexport type TaskStateType = {\n    [key:string] : Array<TaskType>\n}\n\nexport type TodolistType = {\n    id: string,\n    title: string,\n    filter: FilterValuesType,\n}\n\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\"\n\nconst listId1 = v1()\nconst listId2 = v1()\n\nconst initData: TaskStateType = {\n    [listId1]: [\n        {id: v1(), title: \"HTML&CSS\", isDone: true},\n        {id: v1(), title: \"Vanilla JS\", isDone: true},\n        {id: v1(), title: \"React\", isDone: false},\n        {id: v1(), title: \"Redux\", isDone: false},\n    ],\n    [listId2]: [\n        {id: v1(), title: \"PS4\", isDone: true},\n        {id: v1(), title: \"TV\", isDone: true},\n        {id: v1(), title: \"PS5\", isDone: false},\n        {id: v1(), title: \"Cyberpunk 2077\", isDone: false},\n    ]\n}\n\nconst initTodolist: Array<TodolistType> = [\n    {\n        id: listId1,\n        title: \"What to learn\",\n        filter: \"all\",\n    },\n    {\n        id: listId2,\n        title: \"What to buy\",\n        filter: \"active\",\n    }\n]\n\nexport const changeStatus = (taskList: TaskStateType, id: string, status: boolean, listId: string) => {\n    const selectedTask = taskList[listId].find(t => t.id === id)\n    if (selectedTask) selectedTask.isDone = status\n    return {...taskList}\n}\n\nexport const changeTaskTitle = (taskList: TaskStateType, id: string, newTitle: string, listId: string) => {\n    const selectedTask = taskList[listId].find(t => t.id === id)\n    if (selectedTask) selectedTask.title = newTitle\n    return {...taskList}\n}\n\nexport const deleteTask = (taskList: TaskStateType,listId: string, id: string): TaskStateType => {\n    taskList[listId] = taskList[listId].filter(t => t.id !== id)\n    return {...taskList}\n}\n\nexport const addTask = (taskList: TaskStateType, title: string, listId: string): TaskStateType => {\n    const newTask = {\n        id: v1(),\n        title: title,\n        isDone: false\n    }\n    taskList[listId] = [newTask, ...taskList[listId]]\n    return {...taskList}\n}\n\nfunction App() {\n    const [tasks, setTasks] = useState<TaskStateType>(initData)\n    const [todoList, setTodoList] = useState<Array<TodolistType>>(initTodolist)\n    const deleteTaskCallback = (id: string, listId: string) => setTasks(deleteTask(tasks,listId, id))\n    const addTaskCallback = (title: string, listId: string) => setTasks(addTask(tasks, title, listId))\n    const changeStatusCallback = (id: string, status: boolean, listId: string) => setTasks(changeStatus(tasks, id, status, listId))\n    const changeTaskTitleCallback = (id: string, newTitle: string, listId: string) => setTasks(changeTaskTitle(tasks, id, newTitle, listId))\n\n    const changeFilter = (todoListID: string, filter: FilterValuesType) => {\n        let selectedList = todoList.find(tl => tl.id === todoListID)\n        if (selectedList) {\n            selectedList.filter = filter\n            setTodoList([...todoList])\n        }\n    }\n\n    const removeList = (id: string) => {\n        setTodoList(todoList.filter(tl => tl.id !== id))\n        delete tasks[id]\n        setTasks({...tasks})\n    }\n\n    const changeListTitle = (id: string, newTitle: string) => {\n        let selectedList = todoList.find(tl => tl.id === id)\n        if (selectedList) {\n            selectedList.title = newTitle\n            setTodoList([...todoList])\n        }\n    }\n\n    const addList = (title: string) => {\n        let newList: TodolistType = {\n            id: v1(),\n            filter: 'all',\n            title: title\n        }\n        setTodoList([newList, ...todoList])\n        setTasks({\n            ...tasks,\n            [newList.id]: []\n        })\n    }\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        Simple Todolist\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: \"20px 0\"}}>\n                    <AddItemForm addItem={addList} />\n                </Grid>\n                <Grid container spacing={3}>\n                    {\n                        todoList.map(tl => {\n                            let filteredTasks = tasks[tl.id]\n                            if (tl.filter === \"completed\") filteredTasks = tasks[tl.id].filter(t => t.isDone)\n                            else if (tl.filter === \"active\") filteredTasks = tasks[tl.id].filter(t => !t.isDone)\n                            return <Grid item>\n                                <Paper style={{padding: \"20px\"}}>\n                                    <Todolist\n                                        key={tl.id}\n                                        id={tl.id}\n                                        title={tl.title}\n                                        tasks={filteredTasks}\n                                        deleteTaskCallback={deleteTaskCallback}\n                                        changeFilter={changeFilter}\n                                        addTaskCallback={addTaskCallback}\n                                        changeStatusCallback={changeStatusCallback}\n                                        changeTaskTitle={changeTaskTitleCallback}\n                                        changeListTitle={changeListTitle}\n                                        filter={tl.filter}\n                                        removeListCallback={removeList} />\n                                </Paper>\n                            </Grid>\n                        })\n                    }\n                </Grid>\n            </Container>\n\n        </div>\n    );\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}