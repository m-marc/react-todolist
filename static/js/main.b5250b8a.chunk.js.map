{"version":3,"sources":["serviceWorker.ts","state/task/reducers.ts","state/todo-list/reducers.ts","state/app/reducers.ts","state/auth/reducers.ts","state/store.ts","state/app/actions.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","api/api.ts","api/api-key.ts","utils/error-utils.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","state/task/actions.ts","components/SingleTask/SingleTask.tsx","state/task/thunks.ts","components/Todolist/Todolist.tsx","state/todo-list/actions.ts","state/todo-list/thunks.ts","containers/TodolistContainer/TodolistContainer.tsx","state/auth/actions.ts","components/Login/Login.tsx","state/auth/thunks.ts","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","status","error","isInitialized","isLoggedIn","rootReducer","combineReducers","tasks","state","action","type","listId","stateCopy","todos","forEach","tl","id","filter","t","taskId","task","todoListId","map","model","entityStatus","todo","todolist","title","app","value","auth","store","createStore","applyMiddleware","thunk","setAppStatus","setAppError","Alert","props","elevation","variant","ErrorSnackbar","useSelector","dispatch","useDispatch","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TaskStatuses","TaskPriorities","settings","withCredentials","headers","instance","axios","create","baseURL","api","post","then","res","data","get","put","delete","taskAPI","authAPI","r","handleServerAppError","messages","length","handleServerNetworkError","message","AddItemForm","React","memo","addItem","useState","stateTitle","setTitle","setError","handleClick","trim","TextField","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","setStateTitle","onBlur","autoFocus","onDoubleClick","updateTask","SingleTask","singleTask","className","Completed","Checkbox","checked","New","domainModel","getState","changeTaskEntityStatus","find","startDate","priority","description","deadline","resultCode","catch","thunkUpdateTask","removeTask","thunkRemoveTask","Delete","Todolist","list","useEffect","setTask","items","filteredTasks","onClickChangeFilter","dataset","changeTodolistFilter","style","display","alignItems","justifyContent","listTitle","changeTodolistTitle","removeTodolist","taskTitle","item","thunkAddTask","Button","data-filter","TodolistContainer","todoList","addNewList","useCallback","thunkAddTodolist","Grid","container","padding","spacing","Paper","to","setIsLoggedIn","MyCheckbox","useField","field","FormControlLabel","control","Login","justify","xs","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","setSubmitting","resetForm","handleBlur","touched","FormControl","FormLabel","href","target","rel","FormGroup","name","margin","as","App","logoutHandle","AppBar","position","Toolbar","edge","aria-label","Typography","minHeight","LinearProgress","Container","fixed","path","component","render","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.b5250b8a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {TasksActionTypes} from \"./actions\";\nimport {TaskType} from \"../../api/api\";\n\nexport type TaskStateType = { [key:string] : Array<TaskType> }\nconst initialState: TaskStateType = {}\n\nexport const taskReducer = (state: TaskStateType = initialState, action: TasksActionTypes) => {\n    switch (action.type) {\n        case 'Task/get_tasks':\n            return {...state, [action.listId]: action.tasks}\n        case 'Todolist/get_todos': {\n            const stateCopy = {...state}\n            action.todos.forEach(tl => stateCopy[tl.id] = [])\n            return stateCopy\n        }\n        case 'Task/remove_task':\n            return {...state, [action.listId]: state[action.listId].filter(t => t.id !== action.taskId)}\n        case 'Task/add_task':\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        case \"Task/update_task\":\n            return {\n                ...state,\n                [action.listId]: state[action.listId]\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            }\n        case 'Task/change_entity_status':\n            return {\n                ...state,\n                [action.listId]: state[action.listId]\n                    .map(t => t.id === action.taskId ? {...t, entityStatus: action.entityStatus} : t)\n            }\n        case 'Todolist/add_list':\n            return {...state, [action.todo.id]: []}\n        case \"Todolist/remove_list\": {\n            const stateCopy = {...state}\n            delete stateCopy[action.listId]\n            return stateCopy\n        }\n        default:\n            return state\n    }\n}\n","import {TodolistType} from \"../../api/api\"\nimport {TodolistActionTypes} from \"./actions\";\nimport {RequestStatusType} from \"../app/actions\";\n\nexport type TodolistDomainType = TodolistType & {\n    filter?: FilterValuesType,\n    entityStatus?: RequestStatusType\n}\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\"\n\nconst initialState: TodolistType[] = []\n\nexport const todolistReducer = (state: TodolistDomainType[] = initialState, action: TodolistActionTypes): TodolistDomainType[] => {\n    switch (action.type) {\n        case \"Todolist/remove_list\":\n            return state.filter(tl => tl.id !== action.listId)\n        case 'Todolist/add_list':\n            return [action.todo, ...state]\n        case 'Todolist/change_title':\n            return state.map( tl => tl.id === action.id ? {...tl, title: action.title} : tl)\n        case 'Todolist/change_filter':\n            return state.map( tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\n        case 'Todolist/get_todos':\n            return action.todos.map( t => ({...t, filter: \"all\"}))\n        case \"Todolist/change_entity_status\":\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.entityStatus} : tl)\n        default:\n            return state\n    }\n}","import {AppActionsType as ActionsType, RequestStatusType} from \"./actions\";\n\nconst initialState = {\n    status: 'idle' as RequestStatusType,\n    error: null as string | null,\n    isInitialized: false\n}\n\ntype InitialStateType = typeof initialState\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'app/set_status':\n            return {...state, status: action.status}\n        case \"app/set_error\":\n            return {...state, error: action.error}\n        case \"app/set_initialize\":\n            return {...state, isInitialized: action.value}\n        default:\n            return state\n    }\n}","import {AuthActionsType} from \"./actions\";\n\nconst initialState = {\n    isLoggedIn: false\n}\n\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\n    switch (action.type) {\n        case \"Login/IS_LOGGED_IN\":\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}","import {taskReducer} from './task/reducers';\nimport {todolistReducer} from './todo-list/reducers';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunk from \"redux-thunk\";\nimport {appReducer} from \"./app/reducers\";\nimport {authReducer} from \"./auth/reducers\";\n\n\nconst rootReducer = combineReducers({\n    tasks: taskReducer,\n    todolist: todolistReducer,\n    app: appReducer,\n    auth: authReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type AppActionsType = ReturnType<typeof setAppStatus> | ReturnType<typeof setAppError>\n    | ReturnType<typeof setAppInitialize>\n\nexport const setAppStatus = (status: RequestStatusType) => ({type: 'app/set_status', status} as const)\nexport const setAppError = (error: string | null) => ({type: 'app/set_error', error} as const)\nexport const setAppInitialize = (value: boolean) => ({type: 'app/set_initialize', value} as const)","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {setAppError} from \"../../state/app/actions\";\nimport {AppRootStateType} from \"../../state/store\";\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n    const dispatch = useDispatch()\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') return\n        dispatch(setAppError(null))\n    }\n\n    return (\n        <Snackbar open={!!error} autoHideDuration={3000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import axios from 'axios'\nimport {Api} from \"./api-key\";\n\nexport type TodolistType = {\n    id: string,\n    addedDate: string,\n    order: number,\n    title: string\n}\n\nexport type TaskType = {\n    description: string,\n    title: string,\n    completed: boolean,\n    status: TaskStatuses,\n    priority: TaskPriorities,\n    startDate: string,\n    deadline: string,\n    id: string,\n    todoListId: string,\n    order: number,\n    addedDate: string,\n}\ntype UpdateTaskModelType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number,\n    messages: Array<string>,\n    data: D\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\ntype AuthLoginType = {\n    email: string,\n    password: string,\n    rememberMe: boolean,\n    captcha?: string\n}\n\nconst settings = {\n    withCredentials: true,\n    headers: {\n        'API-KEY': Api.KEY\n    }\n}\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    ...settings\n})\n\nexport const api = {\n    createTodo(title: string) {\n        return instance.post<ResponseType<{item: TodolistType}>>('todo-lists',{title})\n            .then(res => res.data)\n    },\n    getTodos() {\n        return instance.get<Array<TodolistType>>('todo-lists')\n    },\n    updateList(listId: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${listId}`,{title})\n    },\n    deleteList(listId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${listId}`)\n    }\n}\n\nexport const taskAPI = {\n    createTask(listId: string, title: string) {\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${listId}/tasks`,{title})\n    },\n    getTasks(listId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${listId}/tasks`)\n    },\n    updateTask(listId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<ResponseType<{item:TaskType}>>(`todo-lists/${listId}/tasks/${taskId}`,model)\n    },\n    deleteTask(listId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${listId}/tasks/${taskId}`)\n    }\n}\n\nexport const authAPI = {\n    login(data: AuthLoginType) {\n        return instance.post<ResponseType<{userId: number}>>(`auth/login`, data).then(r => r.data)\n    },\n    me() {\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>(`auth/me`).then(r => r.data)\n    },\n    logout() {\n        return instance.delete<ResponseType<{}>>(`auth/login`).then(r => r.data)\n    }\n}","export const Api = {\n    KEY: \"b0638a31-7f21-4809-a537-b5553f97597b\"\n}","import { setAppError, setAppStatus, AppActionsType as ActionsType } from '../state/app/actions';\nimport { Dispatch } from 'redux';\nimport { ResponseType } from '../api/api';\n\n// generic function\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\n    if (data.messages.length) dispatch(setAppError(data.messages[0]))\n    else dispatch(setAppError('Some error occurred'))\n    dispatch(setAppStatus('failed'))\n}\n\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\n    dispatch(setAppError(error.message))\n    dispatch(setAppStatus('failed'))\n}\n\ntype ErrorUtilsDispatchType = Dispatch<ActionsType>","import React, {ChangeEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo(({ addItem }) => {\n    const [stateTitle, setTitle] = useState(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        error && setError(null)\n        if (e.key === \"Enter\") handleClick()\n    }\n    //add new item on button click\n    const handleClick = () => {\n        if (stateTitle.trim() !== \"\") {\n            addItem(stateTitle)\n            setTitle(\"\")\n        } else setError(\"Title is required\")\n    }\n\n    return <div>\n        <TextField variant={\"outlined\"}\n                   value={stateTitle}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   error={!!error}\n                   label={\"Title\"}\n                   helperText={error}\n        />\n        <IconButton color={\"primary\"} onClick={handleClick}>\n            <AddBox />\n        </IconButton>\n    </div>\n})\n\nexport default AddItemForm","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\nexport type EditableSpanPropsType = {\n    title: string,\n    onChange: (newValue: string) => void\n}\n\nconst EditableSpan: React.FC<EditableSpanPropsType> = ({title, onChange}) => {\n    const [editMode, setEditMode] = useState(false)\n    const [stateTitle, setStateTitle] = useState(\"\")\n\n    const setEditableMode = () => {\n        setEditMode(true)\n        setStateTitle(title)\n    }\n    const setViewMode = () => {\n        setEditMode(false)\n        onChange(stateTitle)\n    }\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => setStateTitle(e.currentTarget.value)\n\n    return editMode\n        ? <TextField variant={\"outlined\"} value={stateTitle} onBlur={setViewMode} onChange={onChangeInputHandler} autoFocus/>\n        : <span onDoubleClick={setEditableMode}>{title}</span>\n}\n\nexport default EditableSpan","import {addTodolistAction, getTodolistAction, RemoveListAction} from \"../todo-list/actions\";\nimport {TaskPriorities, TaskStatuses, TaskType} from \"../../api/api\";\nimport {RequestStatusType} from \"../app/actions\";\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksActionTypes = ReturnType<typeof setTask>\n    | ReturnType<typeof removeTask>\n    | ReturnType<typeof addTask>\n    | ReturnType<typeof updateTask>\n    | getTodolistAction\n    | addTodolistAction\n    | RemoveListAction\n    | changeTaskEntityStatusAction\n\n\nexport const setTask = (tasks: TaskType[], listId: string) => ({type: 'Task/get_tasks', tasks, listId} as const)\nexport const removeTask = (listId:string, taskId: string) => ({type: 'Task/remove_task', listId, taskId} as const)\nexport const addTask =  (task: TaskType) => ({type: 'Task/add_task', task} as const)\nexport const updateTask = (listId: string, taskId: string, model: UpdateDomainTaskModelType) =>\n    ({type: 'Task/update_task', listId, taskId, model} as const)\n\nexport type changeTaskEntityStatusAction = ReturnType<typeof changeTaskEntityStatus>\nexport const changeTaskEntityStatus = (listId: string, taskId: string, entityStatus: RequestStatusType) =>\n    ({type: 'Task/change_entity_status', listId, taskId, entityStatus} as const)","import React, {ChangeEvent} from 'react'\nimport {TaskType} from \"../../api/api\";\nimport EditableSpan from \"../EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {TaskStatuses} from \"../../api/api\";\nimport {useDispatch} from \"react-redux\";\nimport {thunkRemoveTask, thunkUpdateTask} from \"../../state/task/thunks\";\nimport {updateTask} from \"../../state/task/actions\";\n\nexport type TaskListPropType = {\n    singleTask: TaskType,\n    listId: string\n}\n\nconst SingleTask : React.FC<TaskListPropType> = React.memo(({singleTask, listId}) => {\n    const dispatch = useDispatch()\n    const onClickDeleteTaskHandler = () => dispatch(thunkRemoveTask(listId, singleTask.id))\n    const onChangeTitleHandler = (title: string) => dispatch(updateTask(listId, singleTask.id, {title}))\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let status: TaskStatuses = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\n        dispatch(thunkUpdateTask(listId, singleTask.id, {status}))\n    }\n\n    return (\n        <div className={singleTask.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\n            <Checkbox onChange={onChangeStatusHandler} color={\"primary\"} checked={singleTask.status === TaskStatuses.Completed}/>\n            <EditableSpan title={singleTask.title} onChange={onChangeTitleHandler}/>\n            <IconButton onClick={onClickDeleteTaskHandler}>\n                <Delete/>\n            </IconButton>\n        </div>\n    )\n})\n\nexport default SingleTask","import {Dispatch} from \"redux\";\nimport {taskAPI} from \"../../api/api\";\nimport {\n    addTask,\n    changeTaskEntityStatus,\n    removeTask,\n    setTask,\n    UpdateDomainTaskModelType, updateTask\n} from \"./actions\";\nimport {AppRootStateType} from \"../store\";\nimport {setAppStatus} from \"../app/actions\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\nexport const thunkSetTask = (listId: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatus('loading'))\n    taskAPI.getTasks(listId)\n        .then(res => {\n            dispatch(setTask(res.data.items, listId))\n            dispatch(setAppStatus('succeeded'))\n        })\n        .catch(error => handleServerNetworkError(error, dispatch))\n}\n\nexport const thunkAddTask = (listId: string, taskTitle: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatus('loading'))\n    taskAPI.createTask(listId, taskTitle)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(addTask(res.data.data.item))\n                dispatch(setAppStatus('succeeded'))\n            } else handleServerAppError(res.data, dispatch)\n        })\n        .catch(error => handleServerNetworkError(error, dispatch))\n}\n\nexport const thunkUpdateTask = (listId: string, taskId: string, domainModel: UpdateDomainTaskModelType) =>\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\n        dispatch(setAppStatus('loading'))\n        dispatch(changeTaskEntityStatus(listId, taskId, 'loading'))\n        const task = getState().tasks[listId].find(t => t.id === taskId)\n        task && taskAPI.updateTask(listId, taskId, {\n            title: task.title,\n            startDate: task.startDate,\n            priority: task.priority,\n            description: task.description,\n            deadline: task.deadline,\n            status: task.status,\n            ...domainModel\n        })\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    dispatch(updateTask(listId, taskId, domainModel))\n                    dispatch(setAppStatus('succeeded'))\n                } else handleServerAppError(res.data, dispatch)\n            })\n            .catch(error => handleServerNetworkError(error, dispatch))\n    }\n\nexport const thunkRemoveTask = (listId: string, taskId: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatus('loading'))\n    taskAPI.deleteTask(listId, taskId)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(removeTask(listId, taskId))\n                dispatch(setAppStatus('succeeded'))\n            } else handleServerAppError(res.data, dispatch)\n        })\n        .catch(error => handleServerNetworkError(error, dispatch))\n}","import React, {useEffect} from \"react\";\nimport {TaskStatuses, TaskType} from \"../../api/api\";\nimport SingleTask from \"../SingleTask/SingleTask\";\nimport AddItemForm from \"../AddItemForm/AddItemForm\";\nimport EditableSpan from \"../EditableSpan/EditableSpan\";\nimport {IconButton, Button} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {thunkAddTask, thunkSetTask} from \"../../state/task/thunks\";\nimport {FilterValuesType, TodolistDomainType} from \"../../state/todo-list/reducers\";\nimport {thunkChangeTodolistTitle, thunkRemoveTodolist} from \"../../state/todo-list/thunks\";\nimport {changeTodolistFilter} from \"../../state/todo-list/actions\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {TaskStateType} from \"../../state/task/reducers\";\n\ntype TaskListPropsType = {\n    list: TodolistDomainType\n}\n\nconst Todolist: React.FC<TaskListPropsType> = React.memo(({list}) => {\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(thunkSetTask(list.id))\n    }, [dispatch, list.id])\n\n    let filteredTasks = tasks[list.id];\n\n    if (list.filter === \"completed\") filteredTasks = tasks[list.id].filter(t => t.status ===  TaskStatuses.Completed)\n    else if (list.filter === \"active\") filteredTasks = tasks[list.id].filter(t => t.status === TaskStatuses.New)\n\n    const onClickChangeFilter = (e: React.MouseEvent<HTMLButtonElement>) => {\n        if (e.currentTarget.dataset.filter) {\n            //@ts-ignore\n            const filter: FilterValuesType = e.currentTarget.dataset.filter\n            dispatch(changeTodolistFilter(list.id, filter))\n        }\n    }\n    const onClickRemoveHandler = () => dispatch(thunkRemoveTodolist(list.id))\n    const handleAdd = (taskTitle: string) => dispatch(thunkAddTask(list.id, taskTitle))\n    const handleChangeTitle = (listTitle: string) => dispatch(thunkChangeTodolistTitle(list.id, listTitle))\n\n    const flexWrap = {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n    }\n    return (\n        <div>\n            <div style={flexWrap}>\n                <h3><EditableSpan title={list.title} onChange={handleChangeTitle}/></h3>\n                <IconButton onClick={onClickRemoveHandler}><Delete/></IconButton>\n            </div>\n            <AddItemForm addItem={handleAdd}/>\n            <ul>\n                {filteredTasks.map((t: TaskType)  => (\n                    <SingleTask\n                        key={t.id}\n                        listId={list.id}\n                        singleTask={t}\n                    />\n                ))}\n            </ul>\n            <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                <Button variant={list.filter === \"all\" ? \"outlined\" : \"text\"} color={\"default\"} data-filter=\"all\" onClick={onClickChangeFilter}>All</Button>\n                <Button variant={list.filter === \"active\" ? \"outlined\" : \"text\"} color={\"primary\"} data-filter=\"active\" onClick={onClickChangeFilter}>Active</Button>\n                <Button variant={list.filter === \"completed\" ? \"outlined\" : \"text\"} color={\"secondary\"} data-filter=\"completed\" onClick={onClickChangeFilter}>Completed</Button>\n            </div>\n        </div>\n    )\n})\n\nexport default Todolist","import {TodolistType} from \"../../api/api\";\nimport {FilterValuesType} from \"./reducers\";\nimport {RequestStatusType} from \"../app/actions\";\nexport type TodolistActionTypes = RemoveListAction\n    | getTodolistAction\n    | addTodolistAction\n    | ReturnType<typeof changeTodolistTitle>\n    | ReturnType<typeof changeTodolistFilter>\n    | ReturnType<typeof changeTodolistEntityStatus>\n\nexport const removeTodolist = (listId: string) => \n    ({type: \"Todolist/remove_list\", listId} as const)\nexport type RemoveListAction = ReturnType<typeof removeTodolist>\n\nexport const getTodolist = (todos: TodolistType[]) =>\n    ({type: 'Todolist/get_todos', todos} as const)\nexport type getTodolistAction = ReturnType<typeof getTodolist>\n\nexport const addTodolist = (todo: TodolistType) =>\n    ({type: 'Todolist/add_list', todo} as const)\nexport type addTodolistAction = ReturnType<typeof addTodolist>\n\nexport const changeTodolistTitle = (id: string, title: string) =>\n    ({type: 'Todolist/change_title', id, title} as const)\n\nexport const changeTodolistFilter = (id: string, filter: FilterValuesType) => \n    ({type: 'Todolist/change_filter', id, filter} as const)\n\nexport const changeTodolistEntityStatus = (id: string, entityStatus: RequestStatusType) =>\n    ({type: 'Todolist/change_entity_status', id, entityStatus} as const)","import {Dispatch} from \"redux\";\nimport {api} from \"../../api/api\";\nimport {addTodolist, changeTodolistEntityStatus, changeTodolistTitle, getTodolist, removeTodolist} from \"./actions\";\nimport {setAppStatus} from \"../app/actions\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\nexport const thunkFetchTodolist = () => (dispatch: Dispatch) => {\n    dispatch(setAppStatus('loading'))\n     api.getTodos()\n        .then(res => {\n            dispatch(getTodolist(res.data))\n            dispatch(setAppStatus('succeeded'))\n        })\n         .catch(error => handleServerNetworkError(error, dispatch))\n}\n\nexport const thunkRemoveTodolist = (listId: string) => (dispatch: Dispatch) => {\n    dispatch(changeTodolistEntityStatus(listId, \"loading\"))\n    dispatch(setAppStatus('loading'))\n     api.deleteList(listId)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(removeTodolist(listId))\n                dispatch(setAppStatus('succeeded'))\n            }\n            else handleServerAppError(res.data, dispatch)\n        })\n         .catch(error => handleServerNetworkError(error, dispatch))\n}\n\nexport const thunkAddTodolist = (title: string) => (dispatch: Dispatch) => {\n    dispatch(setAppStatus('loading'))\n    api.createTodo(title)\n        .then(res => {\n            if (res.resultCode === 0) {\n                dispatch(addTodolist(res.data.item))\n                dispatch(setAppStatus('succeeded'))\n            }\n            else handleServerAppError(res, dispatch)\n        })\n        .catch(error => handleServerNetworkError(error, dispatch))\n}\n\nexport const thunkChangeTodolistTitle = (id: string, title: string) =>\n    (dispatch: Dispatch) => {\n        dispatch(setAppStatus('loading'))\n        api.updateList(id, title)\n            .then(() => {\n                dispatch(changeTodolistTitle(id, title))\n                dispatch(setAppStatus('succeeded'))\n            })\n            .catch(error => handleServerNetworkError(error, dispatch))\n}\n\n","import React, {useCallback, useEffect} from 'react'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {thunkAddTodolist, thunkFetchTodolist} from \"../../state/todo-list/thunks\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {TodolistDomainType} from \"../../state/todo-list/reducers\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\nimport Todolist from \"../../components/Todolist/Todolist\";\nimport {Redirect} from \"react-router-dom\";\n\nexport const TodolistContainer = () => {\n    const dispatch = useDispatch()\n    const todoList = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolist)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n\n    useEffect(() => {\n        isLoggedIn && dispatch(thunkFetchTodolist())\n    }, [dispatch, isLoggedIn])\n\n    const addNewList = useCallback((title: string) => {\n        dispatch(thunkAddTodolist(title))\n    }, [dispatch])\n\n    if (!isLoggedIn) return <Redirect to={\"/login\"}/>\n\n    return <>\n        <Grid container style={{padding: \"20px 0\"}}>\n            <AddItemForm addItem={addNewList} />\n        </Grid>\n        <Grid container spacing={3}>\n            {\n                todoList.map(tl => <Grid item key={tl.id}>\n                    <Paper style={{padding: \"20px\"}}>\n                        <Todolist\n                            key={tl.id}\n                            list={tl}\n                        />\n                    </Paper>\n                </Grid>)\n            }\n        </Grid>\n    </>\n}","import {AppActionsType} from \"../app/actions\";\n\nexport const setIsLoggedIn = (value: boolean) => ({type: \"Login/IS_LOGGED_IN\", value} as const)\n\nexport type AuthActionsType = ReturnType<typeof setIsLoggedIn> | AppActionsType","import React from 'react';\nimport {\n    Button,\n    Checkbox,\n    FormControl,\n    FormControlLabel,\n    FormGroup,\n    FormLabel,\n    Grid,\n    TextField\n} from \"@material-ui/core\";\nimport {Field, FieldAttributes, Form, Formik, FormikHelpers, useField} from \"formik\"\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {thunkLogin} from \"../../state/auth/thunks\";\nimport {AppRootStateType} from \"../../state/store\";\nimport {Redirect} from \"react-router-dom\";\n\ninterface Values {\n    email: string,\n    password: string,\n    rememberMe: boolean\n}\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\n\ntype myCheckboxProps = { label : string } & FieldAttributes<{}>\n\nconst MyCheckbox: React.FC<myCheckboxProps> = ({label, ...props}) => {\n    const [field] = useField<{}>(props)\n    return <FormControlLabel {...field} control={<Checkbox />} label={label} />\n}\n\nexport const Login = () => {\n    const dispatch = useDispatch()\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n\n    if (isLoggedIn) return <Redirect to={\"/react-todolist\"} />\n\n    return <Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <Formik\n                initialValues={{\n                    email: '',\n                    password: '',\n                    rememberMe: false\n                }}\n                validate={values => {\n                    const errors: FormikErrorType = {}\n                    if (!values.email) errors.email = 'Required'\n                    else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email))\n                        errors.email = 'Invalid email address'\n                    if(values.password.length < 3) {\n                        errors.password = 'Too short password'\n                    }\n                    return errors\n                }}\n                onSubmit={(\n                    values: Values,\n                    {setSubmitting, resetForm}: FormikHelpers<Values>,\n                ) => {\n                    setSubmitting(true)\n                    dispatch(thunkLogin(values))\n                    setSubmitting(false)\n                    resetForm()\n                }}\n            >\n                {({handleBlur, errors, touched}) => (\n                <Form>\n                    <FormControl>\n                        <FormLabel>\n                            <p>To log in get registered&nbsp;\n                                <a href={'https://social-network.samuraijs.com/'}\n                                   target={'_blank'} rel=\"noopener noreferrer\">here\n                                </a>\n                            </p>\n                            <p>or use common test account credentials:</p>\n                            <p>Email: free@samuraijs.com</p>\n                            <p>Password: free</p>\n                        </FormLabel>\n                        <FormGroup>\n                            <Field error={touched.email && !!errors.email} label=\"Email\"\n                                   helperText={touched.email && errors.email} name=\"email\"\n                                   margin=\"normal\" onBlur={handleBlur} as={TextField}/>\n                            <Field error={touched.password && !!errors.password} type=\"password\"\n                                   helperText={touched.password && errors.password} label=\"Password\"\n                                   margin=\"normal\" onBlur={handleBlur}  name=\"password\" as={TextField}/>\n                            <Field label={'Remember me'} name={\"rememberMe\"} as={MyCheckbox}/>\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                        </FormGroup>\n                    </FormControl>\n                </Form>\n                )}\n            </Formik>\n        </Grid>\n    </Grid>\n};","import {Dispatch} from \"redux\";\nimport {AuthActionsType, setIsLoggedIn} from \"./actions\";\nimport {AppActionsType, setAppInitialize, setAppStatus} from \"../app/actions\";\nimport {authAPI} from \"../../api/api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\nexport const thunkLogin = (data: any) => (dispatch: Dispatch<AuthActionsType>) => {\n    dispatch(setAppStatus('loading'))\n    authAPI.login(data)\n        .then(res => {\n            if (res.resultCode === 0) {\n                dispatch(setIsLoggedIn(true))\n                dispatch(setAppStatus('succeeded'))\n            } else handleServerAppError(res, dispatch)\n        })\n        .catch(error => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\nexport const thunkAuth = () => (dispatch: Dispatch<AuthActionsType | AppActionsType>) => {\n    authAPI.me()\n        .then(res => {\n            if (res.resultCode === 0) {\n                dispatch(setIsLoggedIn(true))\n            }\n            else handleServerAppError(res, dispatch)\n            dispatch(setAppInitialize(true))\n        })\n        .catch(error => handleServerNetworkError(error, dispatch))\n}\n\nexport const thunkLogout = () => (dispatch: Dispatch<AuthActionsType>) => {\n    dispatch(setAppStatus('loading'))\n    authAPI.logout()\n        .then(res => {\n            if (res.resultCode === 0) {\n                dispatch(setIsLoggedIn(false))\n                dispatch(setAppStatus('succeeded'))\n            } else handleServerAppError(res, dispatch)\n        })\n        .catch(error => {\n            handleServerNetworkError(error, dispatch)\n        })\n}","import React, {useCallback, useEffect} from 'react'\nimport './App.css'\nimport {\n    AppBar,\n    Button,\n    CircularProgress,\n    Container,\n    IconButton,\n    LinearProgress,\n    Toolbar,\n    Typography\n} from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./state/store\";\nimport {RequestStatusType} from \"./state/app/actions\";\nimport {ErrorSnackbar} from \"./components/ErrorSnackbar/ErrorSnackbar\";\nimport {TodolistContainer} from \"./containers/TodolistContainer/TodolistContainer\";\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport {Login} from \"./components/Login/Login\";\nimport {thunkAuth, thunkLogout} from \"./state/auth/thunks\";\n\nfunction App() {\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n\n    useEffect( ()=> {\n        dispatch(thunkAuth())\n    }, [dispatch])\n\n    const logoutHandle = useCallback(() => {\n        dispatch(thunkLogout())\n    }, [dispatch])\n\n    if (!isInitialized) return <CircularProgress />\n\n    return <BrowserRouter>\n        <div className=\"App\">\n            <ErrorSnackbar />\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        Simple Todolist\n                    </Typography>\n                    {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandle}>Log out</Button>}\n                </Toolbar>\n            </AppBar>\n            <div style={{minHeight: '4px'}}>\n                {status === 'loading' && <LinearProgress color=\"secondary\"/>}\n            </div>\n            <Container fixed>\n                <Switch>\n                    <Route path={\"/react-todolist\"} component={TodolistContainer} />\n                    <Route path={\"/login\"} component={Login} />\n                    <Route render={() => <h1>404: PAGE NOT FOUND</h1>}/>\n                </Switch>\n            </Container>\n        </div>\n    </BrowserRouter>\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    ,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}