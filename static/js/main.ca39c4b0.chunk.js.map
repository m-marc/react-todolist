{"version":3,"sources":["serviceWorker.ts","state/task/actions.ts","state/todo-list/actions.ts","api/api-key.ts","api/todolist-api.ts","state/task/reducers.ts","state/todo-list/reducers.ts","state/store.ts","EditableSpan.tsx","SingleTask.tsx","AddItemForm.tsx","state/task/thunks.ts","Todolist.tsx","state/todo-list/thunks.ts","AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TASK_ACTION_TYPES","ACTION_TYPES","Api","TaskStatuses","TaskPriorities","initialState","rootReducer","combineReducers","tasks","state","action","type","SET_TASKS","stateCopy","listId","GET_TODOS","todos","forEach","tl","id","REMOVE_TASK","filter","t","taskId","ADD_TASK","task","todoListId","CHANGE_STATUS","map","status","CHANGE_TITLE","title","ADD_LIST","todo","REMOVE_LIST","todolist","todoList","find","CHANGE_FILTER","store","createStore","applyMiddleware","thunk","settings","withCredentials","headers","KEY","instance","axios","create","baseURL","todolistAPI","post","then","res","data","get","put","delete","taskAPI","model","EditableSpan","onChange","useState","editMode","setEditMode","stateTitle","setStateTitle","TextField","variant","value","onBlur","e","currentTarget","autoFocus","onDoubleClick","SingleTask","React","memo","props","singleTask","deleteTaskCallback","changeStatusCallback","changeTaskTitle","onChangeTitleHandler","useCallback","newValue","className","Completed","Checkbox","newStatus","checked","New","color","IconButton","onClick","Delete","AddItemForm","addItem","setTitle","error","setError","handleClick","trim","onKeyPress","key","label","helperText","AddBox","thunkSetTask","dispatch","setTask","items","thunkAddTask","taskTitle","item","thunkUpdateTaskStatus","getState","startDate","priority","description","deadline","changeTaskStatus","thunkRemoveTask","removeTask","thunkUpdateTaskTitle","Todolist","changeListTitle","addTaskCallback","changeFilter","removeListCallback","useDispatch","useEffect","filteredTasks","mappedList","onAllClickHandler","onActiveClickHandler","onCompletedClickHandler","handleAdd","itemTitle","style","display","alignItems","justifyContent","newTitle","Button","thunkFetchTodolist","thunkRemoveTodolist","removeTodolist","thunkAddTodolist","thunkChangeTodolistTitle","changeTodolistTitle","AppWithRedux","useSelector","changeTaskTitleCallback","todoListID","changeTodolistFilter","removeList","addList","AppBar","position","Toolbar","edge","aria-label","Typography","Container","fixed","Grid","container","padding","spacing","Paper","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.ca39c4b0.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {addTodolistAction, getTodolistAction, RemoveListAction} from \"../todo-list/actions\";\r\nimport {TaskStatuses, TaskType} from \"../../api/todolist-api\";\r\n\r\nexport enum TASK_ACTION_TYPES {\r\n    SET_TASKS = 'SET_TASKS',\r\n    REMOVE_TASK = 'REMOVE_TASK',\r\n    ADD_TASK = 'ADD_TASK',\r\n    CHANGE_STATUS = 'CHANGE_TASK_STATUS',\r\n    CHANGE_TITLE = 'CHANGE_TASK_TITLE'\r\n}\r\nexport type setTaskAction = ReturnType<typeof setTask>\r\nexport const setTask = (tasks: TaskType[], listId: string) =>\r\n    ({type: TASK_ACTION_TYPES.SET_TASKS, tasks, listId} as const)\r\n\r\nexport type removeTaskAction = ReturnType<typeof removeTask>\r\nexport const removeTask = (listId:string, taskId: string) =>\r\n    ({type: TASK_ACTION_TYPES.REMOVE_TASK, listId, taskId} as const)\r\n\r\nexport type addTaskAction = ReturnType<typeof addTask>\r\nexport const addTask =  (task: TaskType) =>\r\n    ({type: TASK_ACTION_TYPES.ADD_TASK, task} as const)\r\n\r\nexport type changeTaskTitleAction = ReturnType<typeof changeTaskTitle>\r\nexport const changeTaskTitle = (listId: string, taskId: string, title: string) =>\r\n    ({type: TASK_ACTION_TYPES.CHANGE_TITLE, listId, taskId, title} as const)\r\n\r\nexport type changeTaskStatusAction = ReturnType<typeof changeTaskStatus>\r\nexport const changeTaskStatus = (listId: string, taskId: string, status: TaskStatuses) =>\r\n    ({type: TASK_ACTION_TYPES.CHANGE_STATUS, listId, taskId, status} as const)\r\n\r\nexport type TasksActionTypes = getTodolistAction\r\n    | setTaskAction\r\n    | removeTaskAction\r\n    | addTaskAction\r\n    | changeTaskTitleAction\r\n    | changeTaskStatusAction\r\n    | addTodolistAction\r\n    | RemoveListAction","import {TodolistType} from \"../../api/todolist-api\";\r\nimport {FilterValuesType} from \"./reducers\";\r\n\r\nexport enum ACTION_TYPES {\r\n    REMOVE_LIST= 'REMOVE_LIST',\r\n    ADD_LIST = 'ADD_TODOLIST',\r\n    CHANGE_TITLE = 'CHANGE_LIST_TITLE',\r\n    CHANGE_FILTER = 'CHANGE_LIST_FILTER',\r\n    GET_TODOS = 'GET_TODOS'\r\n}\r\n\r\nexport const removeTodolist = (listId: string) => \r\n    ({type: ACTION_TYPES.REMOVE_LIST, listId} as const)\r\nexport type RemoveListAction = ReturnType<typeof removeTodolist>\r\n\r\nexport const getTodolist = (todos: TodolistType[]) =>\r\n    ({type: ACTION_TYPES.GET_TODOS, todos} as const)\r\nexport type getTodolistAction = ReturnType<typeof getTodolist>\r\n\r\nexport const addTodolist = (todo: TodolistType) =>\r\n    ({type: ACTION_TYPES.ADD_LIST, todo} as const)\r\nexport type addTodolistAction = ReturnType<typeof addTodolist>\r\n\r\nexport const changeTodolistTitle = (id: string, title: string) =>\r\n    ({type: ACTION_TYPES.CHANGE_TITLE, id, title} as const)\r\nexport type changeTodolistTitleAction = ReturnType<typeof changeTodolistTitle>\r\n\r\nexport const changeTodolistFilter = (id: string, filter: FilterValuesType) => \r\n    ({type: ACTION_TYPES.CHANGE_FILTER, id, filter} as const)\r\nexport type changeTodolistFilterAction = ReturnType<typeof changeTodolistFilter>\r\n\r\nexport type TodolistActionTypes = RemoveListAction \r\n    | getTodolistAction \r\n    | addTodolistAction \r\n    | changeTodolistTitleAction\r\n    | changeTodolistFilterAction","export enum Api {\r\n    'KEY'= '18b18771-afed-41ec-9479-2b4a6392a481'\r\n}","import axios from 'axios'\nimport {Api} from \"./api-key\";\n\nexport type TodolistType = {\n    id: string,\n    addedDate: string,\n    order: number,\n    title: string\n}\n\nexport type TaskType = {\n    description: string,\n    title: string,\n    completed: boolean,\n    status: TaskStatuses,\n    priority: TaskPriorities,\n    startDate: string,\n    deadline: string,\n    id: string,\n    todoListId: string,\n    order: number,\n    addedDate: string,\n}\ntype UpdateTaskModelType = {\n    title: string\n    description: string\n    status: number\n    priority: number\n    startDate: string\n    deadline: string\n}\n\n\ntype ResponseType<D = {}> = {\n    resultCode: number,\n    messages: Array<string>,\n    data: D\n}\n\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n\n\nconst settings = {\n    withCredentials: true,\n    headers: {\n        'API-KEY': Api.KEY\n    }\n}\n\nconst instance = axios.create({\n    baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\n    ...settings\n})\n\nexport const todolistAPI = {\n    createTodo(title: string) {\n        return instance.post<ResponseType<{item: TodolistType}>>('todo-lists',{title})\n            .then(res => res.data)\n    },\n    getTodos() {\n        return instance.get<Array<TodolistType>>('todo-lists')\n    },\n    updateList(listId: string, title: string) {\n        return instance.put<ResponseType>(`todo-lists/${listId}`,{title})\n    },\n    deleteList(listId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${listId}`)\n    }\n}\n\nexport const taskAPI = {\n    createTask(listId: string, title: string) {\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${listId}/tasks`,{title})\n    },\n    getTasks(listId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${listId}/tasks`)\n    },\n    updateTask(listId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${listId}/tasks/${taskId}`,model)\n    },\n    deleteTask(listId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${listId}/tasks/${taskId}`)\n    }\n}","import {TaskStateType} from \"../../AppWithRedux\"\nimport {TASK_ACTION_TYPES, TasksActionTypes} from \"./actions\";\nimport {ACTION_TYPES} from \"../todo-list/actions\";\n\nconst initialState: TaskStateType = {}\n\nexport const taskReducer = (state: TaskStateType = initialState, action: TasksActionTypes) => {\n    switch (action.type) {\n        case TASK_ACTION_TYPES.SET_TASKS: {\n            const stateCopy = {...state}\n            stateCopy[action.listId] = action.tasks\n            return stateCopy\n        }\n        case ACTION_TYPES.GET_TODOS: {\n            const stateCopy = {...state}\n            action.todos.forEach(tl => stateCopy[tl.id] = [])\n            return stateCopy\n        }\n        case TASK_ACTION_TYPES.REMOVE_TASK: {\n            const stateCopy = {...state}\n            stateCopy[action.listId] = stateCopy[action.listId]\n                .filter(t => t.id !== action.taskId)\n            return stateCopy\n        }\n        case TASK_ACTION_TYPES.ADD_TASK: {\n            debugger\n            const stateCopy = {...state}\n            const tasks = stateCopy[action.task.todoListId];\n            stateCopy[action.task.todoListId] = [action.task, ...tasks];\n            return stateCopy;\n        }\n        case TASK_ACTION_TYPES.CHANGE_STATUS: {\n            return {\n                ...state,\n                [action.listId]: state[action.listId]\n                    .map(t => t.id === action.taskId\n                        ? {...t, status: action.status}\n                        : t)\n            }\n        }\n        case TASK_ACTION_TYPES.CHANGE_TITLE: {\n            return {\n                ...state,\n                [action.listId]: state[action.listId]\n                    .map(t => t.id === action.taskId\n                        ? {...t, title: action.title}\n                        : t)\n            }\n        }\n        case ACTION_TYPES.ADD_LIST:\n            return {\n                ...state,\n                [action.todo.id]: []\n            }\n        case ACTION_TYPES.REMOVE_LIST: {\n            const stateCopy = {...state}\n            delete stateCopy[action.listId]\n            return stateCopy\n        }\n        default:\n            return state\n    }\n}\n","import {TodolistType} from \"../../api/todolist-api\"\nimport {ACTION_TYPES, TodolistActionTypes} from \"./actions\";\n\nexport type TodolistDomainType = TodolistType & {\n    filter?: FilterValuesType,\n}\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\"\n\nconst initialState: TodolistType[] = []\n\nexport const todolistReducer = (state: TodolistDomainType[] = initialState, action: TodolistActionTypes): TodolistDomainType[] => {\n    switch (action.type) {\n        case ACTION_TYPES.REMOVE_LIST:\n            return state.filter(tl => tl.id !== action.listId)\n        case ACTION_TYPES.ADD_LIST:\n            return [action.todo, ...state]\n        case ACTION_TYPES.CHANGE_TITLE: {\n            const todoList = state.find(tl => tl.id === action.id)\n            todoList && (todoList.title = action.title)\n            return [...state]\n        }\n        case ACTION_TYPES.CHANGE_FILTER: {\n            const todoList = state.find(tl => tl.id === action.id)\n            todoList && (todoList.filter = action.filter)\n            return [...state]\n        }\n        case ACTION_TYPES.GET_TODOS:\n            return action.todos.map( t => ({...t, filter: \"all\"}))\n        default:\n            return state\n    }\n}","import {taskReducer} from './task/reducers';\nimport {todolistReducer} from './todo-list/reducers';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunk from \"redux-thunk\";\n\n\nconst rootReducer = combineReducers({\n    tasks: taskReducer,\n    todolist: todolistReducer\n})\n\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n","import React, {ChangeEvent, useState} from \"react\";\nimport {TextField} from \"@material-ui/core\";\n\nexport type EditableSpanPropsType = {\n    title: string,\n    onChange: (newValue: string) => void\n}\n\nconst EditableSpan: React.FC<EditableSpanPropsType> = ({title, onChange}) => {\n    const [editMode, setEditMode] = useState(false)\n    const [stateTitle, setStateTitle] = useState(\"\")\n\n    const setEditableMode = () => {\n        setEditMode(true)\n        setStateTitle(title)\n    }\n    const setViewMode = () => {\n        setEditMode(false)\n        onChange(stateTitle)\n    }\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => setStateTitle(e.currentTarget.value)\n\n    return editMode\n        ? <TextField variant={\"outlined\"} value={stateTitle} onBlur={setViewMode} onChange={onChangeInputHandler} autoFocus/>\n        : <span onDoubleClick={setEditableMode}>{title}</span>\n}\n\nexport default EditableSpan","import React, {ChangeEvent, useCallback} from 'react'\nimport {TaskType} from \"./api/todolist-api\";\nimport EditableSpan from \"./EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport {TaskStatuses} from \"./api/todolist-api\";\n\nexport type TaskListPropType = {\n    singleTask: TaskType,\n    deleteTaskCallback: (_id: string, listId: string) => void,\n    changeStatusCallback : (id: string, status: TaskStatuses, listId: string) => void,\n    changeTaskTitle: (id: string, newValue: string, listId: string) => void,\n    listId: string\n}\n\nconst SingleTask : React.FC<TaskListPropType> = React.memo((props) => {\n    const {\n        singleTask,\n        deleteTaskCallback,\n        changeStatusCallback,\n        changeTaskTitle,\n        listId\n    } = props\n    const onClickHandler = () => deleteTaskCallback(singleTask.id, listId)\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        let newStatus = e.currentTarget.checked\n        changeStatusCallback(singleTask.id, newStatus ? TaskStatuses.Completed : TaskStatuses.New, listId)\n    }\n    const onChangeTitleHandler = useCallback((newValue: string) => changeTaskTitle(singleTask.id, newValue, listId),\n        [changeTaskTitle, listId, singleTask.id])\n\n    return (\n        <div className={singleTask.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\n            <Checkbox onChange={onChangeStatusHandler} color={\"primary\"} checked={singleTask.status === TaskStatuses.Completed}/>\n            <EditableSpan title={singleTask.title} onChange={onChangeTitleHandler}/>\n            <IconButton onClick={onClickHandler}>\n                <Delete/>\n            </IconButton>\n        </div>\n    )\n})\n\nexport default SingleTask","import React, {ChangeEvent, useState} from \"react\";\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\nexport type AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm: React.FC<AddItemFormPropsType> = React.memo(({ addItem }) => {\n    const [stateTitle, setTitle] = useState(\"\")\n    const [error, setError] = useState<string | null>(null)\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\n        error && setError(null)\n        if (e.key === \"Enter\") handleClick()\n    }\n    //add new item on button click\n    const handleClick = () => {\n        if (stateTitle.trim() !== \"\") {\n            addItem(stateTitle)\n            setTitle(\"\")\n        } else setError(\"Title is required\")\n    }\n\n    return <div>\n        <TextField variant={\"outlined\"}\n                   value={stateTitle}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   error={!!error}\n                   label={\"Title\"}\n                   helperText={error}\n        />\n        <IconButton color={\"primary\"} onClick={handleClick}>\n            <AddBox />\n        </IconButton>\n    </div>\n})\n\nexport default AddItemForm","import {Dispatch} from \"redux\";\r\nimport {taskAPI, TaskStatuses} from \"../../api/todolist-api\";\r\nimport {addTask, changeTaskStatus, changeTaskTitle, removeTask, setTask} from \"./actions\";\r\nimport {AppRootStateType} from \"../store\";\r\n\r\nexport const thunkSetTask = (listId: string) => (dispatch: Dispatch) =>\r\n    taskAPI.getTasks(listId)\r\n        .then(res => dispatch(setTask(res.data.items, listId)))\r\n\r\nexport const thunkAddTask = (listId: string, taskTitle: string) => (dispatch: Dispatch) =>\r\n    taskAPI.createTask(listId, taskTitle)\r\n        .then(res => dispatch(addTask(res.data.data.item)))\r\n\r\nexport const thunkUpdateTaskStatus = (listId: string, taskId: string, status: TaskStatuses) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const task = getState().tasks[listId].find(t => t.id === taskId)\r\n        debugger\r\n        task && taskAPI.updateTask(listId, taskId, {\r\n            title: task.title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: status\r\n        })\r\n            .then(() => dispatch(changeTaskStatus(listId, taskId, status)))\r\n    }\r\n\r\nexport const thunkRemoveTask = (listId: string, taskId: string) => (dispatch: Dispatch) =>\r\n    taskAPI.deleteTask(listId, taskId)\r\n        .then( res => dispatch(removeTask(listId, taskId)))\r\n\r\nexport const thunkUpdateTaskTitle = (listId: string, taskId: string, title: string) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const task = getState().tasks[listId].find(t => t.id === taskId)\r\n        debugger\r\n        task && taskAPI.updateTask(listId, taskId, {\r\n            title: title,\r\n            startDate: task.startDate,\r\n            priority: task.priority,\r\n            description: task.description,\r\n            deadline: task.deadline,\r\n            status: task.status\r\n        })\r\n            .then(() => dispatch(changeTaskTitle(listId, taskId, title)))\r\n    }\r\n","import React, {useCallback, useEffect} from \"react\";\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\nimport SingleTask from \"./SingleTask\";\nimport AddItemForm from \"./AddItemForm\";\nimport EditableSpan from \"./EditableSpan\";\nimport {IconButton, Button} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\nimport {thunkSetTask} from \"./state/task/thunks\";\nimport {FilterValuesType} from \"./state/todo-list/reducers\";\n\ntype TaskListPropsType = {\n    title: string\n    tasks: Array<TaskType>\n    deleteTaskCallback: (id: string, listId: string) => void\n    changeFilter: (listId: string, value: FilterValuesType) => void\n    addTaskCallback: (title: string, listId: string) => void\n    changeStatusCallback : (id: string, status: TaskStatuses, listId: string) => void\n    changeTaskTitle: (id: string, newValue: string, listId: string) => void\n    changeListTitle: (id: string, newValue: string) => void\n    filter?: string,\n    id: string,\n    removeListCallback: (id:string) => void,\n}\n\nconst Todolist: React.FC<TaskListPropsType> = React.memo((props) => {\n    const {\n        tasks,\n        deleteTaskCallback,\n        changeStatusCallback,\n        changeTaskTitle,\n        changeListTitle,\n        addTaskCallback,\n        title,\n        changeFilter,\n        filter,\n        id,\n        removeListCallback\n    } = props\n\n    const flexWrap = {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n    }\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(thunkSetTask(id))\n    }, [dispatch, id])\n\n    let filteredTasks = tasks;\n\n    if (filter === \"completed\") filteredTasks = tasks.filter(t => t.status ===  TaskStatuses.Completed)\n    else if (filter === \"active\") filteredTasks = tasks.filter(t => t.status === TaskStatuses.New)\n\n    const mappedList = filteredTasks.map((t: TaskType)  => (\n        <SingleTask\n            key={t.id}\n            listId={id}\n            singleTask={t}\n            deleteTaskCallback={deleteTaskCallback}\n            changeStatusCallback={changeStatusCallback}\n            changeTaskTitle={changeTaskTitle}\n        />\n    ))\n\n    const onAllClickHandler = useCallback(() => changeFilter(id, \"all\"), [changeFilter, id])\n    const onActiveClickHandler = useCallback(() => changeFilter(id,\"active\"), [changeFilter, id])\n    const onCompletedClickHandler = useCallback(() => changeFilter(id,\"completed\"), [changeFilter, id])\n    const onClickRemoveHandler = () => removeListCallback(id)\n    const handleAdd = useCallback((itemTitle: string) => addTaskCallback(id, itemTitle), [addTaskCallback, id])\n    const handleChangeTitle = (newTitle: string) => changeListTitle(id, newTitle)\n\n    return (\n        <div>\n            <div style={flexWrap}>\n                <h3>\n                    <EditableSpan title={title} onChange={handleChangeTitle}/>\n                </h3>\n                <IconButton onClick={onClickRemoveHandler}>\n                    <Delete/>\n                </IconButton>\n            </div>\n            <AddItemForm addItem={handleAdd}/>\n            <ul>\n                {mappedList}\n            </ul>\n            <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                <Button variant={filter === \"all\" ? \"outlined\" : \"text\"} color={\"default\"} onClick={onAllClickHandler}>All</Button>\n                <Button variant={filter === \"active\" ? \"outlined\" : \"text\"} color={\"primary\"} onClick={onActiveClickHandler}>Active</Button>\n                <Button variant={filter === \"completed\" ? \"outlined\" : \"text\"} color={\"secondary\"} onClick={onCompletedClickHandler}>Completed</Button>\n            </div>\n        </div>\n    )\n})\n\nexport default Todolist","import {Dispatch} from \"redux\";\r\nimport {todolistAPI} from \"../../api/todolist-api\";\r\nimport {addTodolist, changeTodolistTitle, getTodolist, removeTodolist} from \"./actions\";\r\n\r\nexport const thunkFetchTodolist = () => (dispatch: Dispatch) => {\r\n     todolistAPI.getTodos()\r\n        .then(res => dispatch(getTodolist(res.data)))\r\n}\r\n\r\nexport const thunkRemoveTodolist = (listId: string) => (dispatch: Dispatch) => {\r\n     todolistAPI.deleteList(listId)\r\n        .then(res => dispatch(removeTodolist(listId)))\r\n}\r\n\r\nexport const thunkAddTodolist = (title: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.createTodo(title)\r\n        .then(res => dispatch(addTodolist(res.data.item)))\r\n}\r\n\r\nexport const thunkChangeTodolistTitle = (id: string, title: string) =>\r\n    (dispatch: Dispatch) => {\r\n        todolistAPI.updateList(id, title)\r\n            .then(res => dispatch(changeTodolistTitle(id, title)))\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react'\nimport './App.css'\nimport Todolist from \"./Todolist\";\nimport AddItemForm from \"./AddItemForm\";\nimport {AppBar, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./state/store\";\nimport {\n    thunkAddTodolist,\n    thunkChangeTodolistTitle,\n    thunkFetchTodolist,\n    thunkRemoveTodolist\n} from \"./state/todo-list/thunks\";\nimport {changeTodolistFilter} from \"./state/todo-list/actions\";\nimport {TaskStatuses, TaskType} from \"./api/todolist-api\";\nimport {FilterValuesType, TodolistDomainType} from \"./state/todo-list/reducers\";\nimport {thunkAddTask, thunkRemoveTask, thunkUpdateTaskStatus, thunkUpdateTaskTitle} from \"./state/task/thunks\";\n\nexport type TaskStateType = {\n    [key:string] : Array<TaskType>\n}\n\nfunction AppWithRedux() {\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(thunkFetchTodolist())\n    }, [dispatch])\n\n    const todoList = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolist)\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\n\n    const deleteTaskCallback = useCallback((id: string, listId: string) => {\n        dispatch(thunkRemoveTask(listId, id))\n    }, [dispatch])\n    const addTaskCallback = useCallback((title: string, listId: string) => {\n        dispatch(thunkAddTask(title, listId))\n    }, [dispatch])\n    const changeStatusCallback = useCallback((id: string, status: TaskStatuses, listId: string) => {\n        dispatch(thunkUpdateTaskStatus(listId, id, status))\n    }, [dispatch])\n    const changeTaskTitleCallback = useCallback((id: string, newTitle: string, listId: string) => {\n        dispatch(thunkUpdateTaskTitle(listId, id, newTitle))\n    }, [dispatch])\n\n    const changeFilter = useCallback((todoListID: string, filter: FilterValuesType) => {\n        dispatch(changeTodolistFilter(todoListID, filter))\n    }, [dispatch])\n\n    const removeList = useCallback((id: string) => {\n        dispatch(thunkRemoveTodolist(id))\n    }, [dispatch])\n\n    const changeListTitle = useCallback((id: string, newTitle: string) => {\n        dispatch(thunkChangeTodolistTitle(id, newTitle))\n    }, [dispatch])\n\n    const addList = useCallback((title: string) => {\n        dispatch(thunkAddTodolist(title))\n    }, [dispatch])\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        Simple Todolist\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: \"20px 0\"}}>\n                    <AddItemForm addItem={addList} />\n                </Grid>\n                <Grid container spacing={3}>\n                    {\n                        todoList.map(tl => {\n                            debugger\n                            return <Grid item>\n                                <Paper style={{padding: \"20px\"}}>\n                                    <Todolist\n                                        key={tl.id}\n                                        id={tl.id}\n                                        title={tl.title}\n                                        tasks={tasks[tl.id]}\n                                        deleteTaskCallback={deleteTaskCallback}\n                                        changeFilter={changeFilter}\n                                        addTaskCallback={addTaskCallback}\n                                        changeStatusCallback={changeStatusCallback}\n                                        changeTaskTitle={changeTaskTitleCallback}\n                                        changeListTitle={changeListTitle}\n                                        filter={tl.filter}\n                                        removeListCallback={removeList} />\n                                </Paper>\n                            </Grid>\n                        })\n                    }\n                </Grid>\n            </Container>\n\n        </div>\n    );\n}\n\nexport default AppWithRedux\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport AppWithRedux from \"./AppWithRedux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux />\n    </Provider>\n    ,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}