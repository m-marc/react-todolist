{"version":3,"sources":["serviceWorker.ts","state/task-reducer.ts","state/todolist-reducer.ts","state/store.ts","EditableSpan.tsx","SingleTask.tsx","AddItemForm.tsx","Todolist.tsx","AppWithRedux.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","tasks","state","action","type","newState","todolistId","filter","t","id","taskId","newTask","v1","title","isDone","map","status","todolist","tl","newList","selectedList","find","updatedList","store","createStore","EditableSpan","onChange","useState","editMode","setEditMode","stateTitle","setStateTitle","TextField","variant","value","onBlur","e","currentTarget","autoFocus","onDoubleClick","SingleTask","data","deleteTaskCallback","changeStatusCallback","changeTaskTitle","listId","className","Checkbox","checked","color","newValue","IconButton","onClick","Delete","AddItemForm","addItem","setTitle","error","setError","handleClick","trim","onKeyPress","key","label","helperText","AddBox","Todolist","changeListTitle","addTaskCallback","changeFilter","removeListCallback","mappedList","style","display","alignItems","justifyContent","newTitle","itemTitle","Button","AppWithRedux","todoList","useSelector","dispatch","useDispatch","addTaskAC","changeTaskStatusAC","changeTaskTitleCallback","todoListID","ChangeTodoListFilterAC","removeList","ChangeTodoListTitleAC","AppBar","position","Toolbar","edge","aria-label","Typography","Container","fixed","Grid","container","padding","AddTodoListAC","spacing","filteredTasks","item","Paper","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.437c9fd8.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {TaskStateType} from \"../App\"\r\nimport {v1} from \"uuid\";\r\nimport {addListActionType, removeListActionType} from \"./todolist-reducer\";\r\n\r\ntype ActionType = AddTaskActionType | RemoveTaskActionType | changeTaskStatusActionType | changeTaskTitleActionType | addListActionType | removeListActionType\r\n\r\n\r\nexport type AddTaskActionType = {\r\n    type: 'ADD-TASK'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type RemoveTaskActionType = {\r\n    type: 'REMOVE-TASK'\r\n    taskId: string\r\n    todolistId: string\r\n}\r\n\r\nexport type changeTaskStatusActionType = {\r\n    type: 'CHANGE-STATUS',\r\n    status: boolean,\r\n    todolistId: string,\r\n    taskId: string\r\n}\r\n\r\nexport type changeTaskTitleActionType = {\r\n    type: 'CHANGE-TITLE',\r\n    title: string,\r\n    todolistId: string,\r\n    taskId: string\r\n}\r\n\r\nconst initialState: TaskStateType = {}\r\n\r\nexport const taskReducer = (state: TaskStateType = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            let newState = {...state}\r\n            newState[action.todolistId] = newState[action.todolistId].filter(t => t.id !== action.taskId)\r\n            return newState\r\n        }\r\n        case 'ADD-TASK': {\r\n            let newState = {...state}\r\n            let newTask = {\r\n                id: v1(),\r\n                title: action.title,\r\n                isDone: false\r\n            }\r\n            newState[action.todolistId] = [newTask, ...state[action.todolistId]]\r\n            return newState\r\n        }\r\n        case 'CHANGE-STATUS': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => {\r\n                    if (t.id !== action.taskId) return t\r\n                    else return {...t, isDone: action.status}\r\n                })\r\n            }\r\n        }\r\n        case 'CHANGE-TITLE': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => {\r\n                    if (t.id !== action.taskId) return t\r\n                    else return {...t, title: action.title}\r\n                })\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        case 'REMOVE-TODOLIST': {\r\n            let newState = {...state}\r\n            delete newState[action.todolistId]\r\n            return newState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\r\n    return {type: \"REMOVE-TASK\", taskId, todolistId}\r\n}\r\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\r\n    return {type: \"ADD-TASK\", title, todolistId}\r\n}\r\n\r\nexport const changeTaskStatusAC = (taskId: string, status: boolean, todolistId: string): changeTaskStatusActionType => {\r\n    return {type: \"CHANGE-STATUS\", taskId, status, todolistId}\r\n}\r\n\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): changeTaskTitleActionType => {\r\n    return {type: \"CHANGE-TITLE\", taskId, title, todolistId}\r\n}\r\n","import {FilterValuesType, TodolistType} from \"../App\"\r\nimport {v1} from \"uuid\";\r\n\r\ntype ActionType = removeListActionType | addListActionType | changeListTitleActionType | changeListFilterActionType\r\n\r\nexport type removeListActionType = {\r\n    type: 'REMOVE-TODOLIST',\r\n    todolistId: string\r\n}\r\n\r\nexport type addListActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    title: string\r\n    todolistId: string\r\n}\r\nexport type changeListTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    id: string\r\n    title: string\r\n}\r\nexport type changeListFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    id: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nconst initialState: TodolistType[] = []\r\n\r\nexport const todolistReducer = (state: TodolistType[] = initialState, action: ActionType) => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.todolistId)\r\n        case 'ADD-TODOLIST':\r\n            const newList: TodolistType = {\r\n                id: action.todolistId,\r\n                filter: 'all',\r\n                title: action.title\r\n            }\r\n            return [...state, newList]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            const selectedList = state.find(tl => tl.id === action.id)\r\n            if (selectedList){\r\n                selectedList.title = action.title\r\n            }\r\n            return [...state]\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            const updatedList = state.find(tl => tl.id === action.id)\r\n            if (updatedList) updatedList.filter = action.filter\r\n            return [...state]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const RemoveTodoListAC = (todolistId: string): removeListActionType => {\r\n    return {type: \"REMOVE-TODOLIST\", todolistId}\r\n}\r\nexport const AddTodoListAC = (title: string): addListActionType => {\r\n    return {type: \"ADD-TODOLIST\", title: title, todolistId: v1()}\r\n}\r\nexport const ChangeTodoListTitleAC = (id: string, title: string): changeListTitleActionType => {\r\n    return {type: \"CHANGE-TODOLIST-TITLE\", id: id, title: title}\r\n}\r\nexport const ChangeTodoListFilterAC = (id: string, filter: FilterValuesType): changeListFilterActionType => {\r\n    return {type: \"CHANGE-TODOLIST-FILTER\", filter: filter, id: id}\r\n}","import {taskReducer} from './task-reducer';\r\nimport {todolistReducer} from './todolist-reducer';\r\nimport {combineReducers, createStore} from 'redux';\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: taskReducer,\r\n    todolist: todolistReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport {TextField} from \"@material-ui/core\";\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string,\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nconst EditableSpan: React.FC<EditableSpanPropsType> = ({title, onChange}) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [stateTitle, setStateTitle] = useState(\"\")\r\n\r\n    const setEditableMode = () => {\r\n        setEditMode(true)\r\n        setStateTitle(title)\r\n    }\r\n    const setViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(stateTitle)\r\n    }\r\n    const onChangeInputHandler = (e: ChangeEvent<HTMLInputElement>) => setStateTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField variant={\"outlined\"} value={stateTitle} onBlur={setViewMode} onChange={onChangeInputHandler} autoFocus/>\r\n        : <span onDoubleClick={setEditableMode}>{title}</span>\r\n}\r\n\r\nexport default EditableSpan","import React, {ChangeEvent} from 'react'\r\nimport {TaskType} from \"./App\";\r\nimport EditableSpan from \"./EditableSpan\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {Checkbox, IconButton} from \"@material-ui/core\";\r\n\r\ntype TaskListPropType = {\r\n    data: TaskType,\r\n    deleteTaskCallback: (_id: string, listId: string) => void,\r\n    changeStatusCallback : (id: string, isDone: boolean, listId: string) => void,\r\n    changeTaskTitle: (id: string, newValue: string, listId: string) => void,\r\n    listId: string\r\n}\r\n\r\nconst SingleTask : React.FC<TaskListPropType> = ({data, deleteTaskCallback, changeStatusCallback, changeTaskTitle, listId}) => {\r\n    const onClickHandler = () => deleteTaskCallback(data.id, listId)\r\n    const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => changeStatusCallback(data.id, e.currentTarget.checked, listId)\r\n    const onChangeTitleHandler = (newValue: string) => changeTaskTitle(data.id, newValue, listId)\r\n\r\n    return (\r\n        <div className={data.isDone ? \"is-done\" : \"\"}>\r\n            <Checkbox onChange={onChangeStatusHandler} color={\"primary\"} checked={data.isDone}/>\r\n            <EditableSpan title={data.title} onChange={onChangeTitleHandler}/>\r\n            <IconButton onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleTask","import React, {ChangeEvent, useState} from \"react\";\r\nimport {IconButton, TextField} from \"@material-ui/core\";\r\nimport {AddBox} from \"@material-ui/icons\";\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nconst AddItemForm: React.FC<AddItemFormPropsType> = ({ addItem }) => {\r\n\r\n    const [stateTitle, setTitle] = useState(\"\")\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === \"Enter\") handleClick()\r\n    }\r\n    //add new item on button click\r\n    const handleClick = () => {\r\n        if (stateTitle.trim() !== \"\") {\r\n            addItem(stateTitle)\r\n            setTitle(\"\")\r\n        } else setError(\"Title is required\")\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant={\"outlined\"}\r\n                   value={stateTitle}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   error={!!error}\r\n                   label={\"Title\"}\r\n                   helperText={error}\r\n        />\r\n        <IconButton color={\"primary\"} onClick={handleClick}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n}\r\n\r\nexport default AddItemForm","import React from \"react\";\nimport {FilterValuesType, TaskType} from \"./App\";\nimport SingleTask from \"./SingleTask\";\nimport AddItemForm from \"./AddItemForm\";\nimport EditableSpan from \"./EditableSpan\";\nimport {IconButton, Button} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\n\ntype TaskListPropsType = {\n    title: string\n    tasks: Array<TaskType>\n    deleteTaskCallback: (id: string, listId: string) => void\n    changeFilter: (listId: string, value: FilterValuesType) => void\n    addTaskCallback: (title: string, listId: string) => void\n    changeStatusCallback : (id: string, isDone: boolean, listId: string) => void\n    changeTaskTitle: (id: string, newValue: string, listId: string) => void\n    changeListTitle: (id: string, newValue: string) => void\n    filter: string,\n    id: string,\n    removeListCallback: (id:string) => void,\n}\n\nconst Todolist: React.FC<TaskListPropsType> = ({tasks, deleteTaskCallback, changeStatusCallback, changeTaskTitle, changeListTitle, addTaskCallback, title, changeFilter, filter, id, removeListCallback}) => {\n    const s = {\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'space-between',\n    }\n\n    const mappedList = tasks.map((t: TaskType)  => (\n        <SingleTask\n            key={t.id}\n            listId={id}\n            data={t}\n            deleteTaskCallback={deleteTaskCallback}\n            changeStatusCallback={changeStatusCallback}\n            changeTaskTitle={changeTaskTitle}\n        />\n    ))\n\n    const onAllClickHandler = () => changeFilter(id, \"all\")\n    const onActiveClickHandler = () => changeFilter(id,\"active\")\n    const onCompletedClickHandler = () => changeFilter(id,\"completed\")\n    const onClickRemoveHandler = () => removeListCallback(id)\n    const handleAdd = (itemTitle: string) => addTaskCallback(itemTitle, id)\n    const handleChangeTitle = (newTitle: string) => changeListTitle(id, newTitle)\n\n    return (\n        <div>\n            <div style={s}>\n                <h3>\n                    <EditableSpan title={title} onChange={handleChangeTitle}/>\n                </h3>\n                <IconButton onClick={onClickRemoveHandler}>\n                    <Delete/>\n                </IconButton>\n            </div>\n            <AddItemForm addItem={handleAdd}/>\n            <ul>\n                {mappedList}\n            </ul>\n            <div style={{display: \"flex\", justifyContent: \"space-between\"}}>\n                <Button variant={filter === \"all\" ? \"outlined\" : \"text\"} color={\"default\"} onClick={onAllClickHandler}>All</Button>\n                <Button variant={filter === \"active\" ? \"outlined\" : \"text\"} color={\"primary\"} onClick={onActiveClickHandler}>Active</Button>\n                <Button variant={filter === \"completed\" ? \"outlined\" : \"text\"} color={\"secondary\"} onClick={onCompletedClickHandler}>Completed</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Todolist","import React from 'react'\nimport './App.css'\nimport Todolist from \"./Todolist\";\nimport AddItemForm from \"./AddItemForm\";\nimport {AppBar, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\nimport MenuIcon from '@material-ui/icons/Menu';\nimport {\n    AddTodoListAC,\n    ChangeTodoListFilterAC,\n    ChangeTodoListTitleAC,\n    RemoveTodoListAC,\n} from \"./state/todolist-reducer\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"./state/task-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"./state/store\";\n\nexport interface TaskType {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nexport type TaskStateType = {\n    [key:string] : Array<TaskType>\n}\n\nexport type TodolistType = {\n    id: string,\n    title: string,\n    filter: FilterValuesType,\n}\n\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\"\n\nfunction AppWithRedux() {\n    const todoList = useSelector<AppRootStateType, TodolistType[]>(state => state.todolist)\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\n    const dispatch = useDispatch()\n\n    const deleteTaskCallback = (id: string, listId: string) => {\n        dispatch(removeTaskAC(id, listId))\n    }\n    const addTaskCallback = (title: string, listId: string) => {\n        dispatch(addTaskAC(title, listId))\n    }\n    const changeStatusCallback = (id: string, status: boolean, listId: string) => {\n        dispatch(changeTaskStatusAC(id, status, listId))\n    }\n    const changeTaskTitleCallback = (id: string, newTitle: string, listId: string) => {\n        dispatch(changeTaskTitleAC(id, newTitle, listId))\n    }\n\n    const changeFilter = (todoListID: string, filter: FilterValuesType) => {\n        dispatch(ChangeTodoListFilterAC(todoListID, filter))\n    }\n\n    const removeList = (id: string) => {\n        dispatch(RemoveTodoListAC(id))\n    }\n\n    const changeListTitle = (id: string, newTitle: string) => {\n        dispatch(ChangeTodoListTitleAC(id, newTitle))\n    }\n\n    const addList = (title: string) => {\n        dispatch(AddTodoListAC(title))\n    }\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <MenuIcon />\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        Simple Todolist\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: \"20px 0\"}}>\n                    <AddItemForm addItem={addList} />\n                </Grid>\n                <Grid container spacing={3}>\n                    {\n                        todoList.map(tl => {\n                            let filteredTasks = tasks[tl.id]\n                            if (tl.filter === \"completed\") filteredTasks = tasks[tl.id].filter(t => t.isDone)\n                            else if (tl.filter === \"active\") filteredTasks = tasks[tl.id].filter(t => !t.isDone)\n                            return <Grid item>\n                                <Paper style={{padding: \"20px\"}}>\n                                    <Todolist\n                                        key={tl.id}\n                                        id={tl.id}\n                                        title={tl.title}\n                                        tasks={filteredTasks}\n                                        deleteTaskCallback={deleteTaskCallback}\n                                        changeFilter={changeFilter}\n                                        addTaskCallback={addTaskCallback}\n                                        changeStatusCallback={changeStatusCallback}\n                                        changeTaskTitle={changeTaskTitleCallback}\n                                        changeListTitle={changeListTitle}\n                                        filter={tl.filter}\n                                        removeListCallback={removeList} />\n                                </Paper>\n                            </Grid>\n                        })\n                    }\n                </Grid>\n            </Container>\n\n        </div>\n    );\n}\n\nexport default AppWithRedux\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./state/store\";\nimport AppWithRedux from \"./AppWithRedux\";\n\nReactDOM.render(\n    <Provider store={store}>\n        <AppWithRedux />\n    </Provider>\n    ,  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}